//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWeatherClient.TestService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestData", Namespace="http://schemas.datacontract.org/2004/07/Test")]
    [System.SerializableAttribute()]
    public partial class TestData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WindField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Wind {
            get {
                return this.WindField;
            }
            set {
                if ((object.ReferenceEquals(this.WindField, value) != true)) {
                    this.WindField = value;
                    this.RaisePropertyChanged("Wind");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestService.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetName", ReplyAction="http://tempuri.org/ITestService/GetNameResponse")]
        string GetName(string sourceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetName", ReplyAction="http://tempuri.org/ITestService/GetNameResponse")]
        System.IAsyncResult BeginGetName(string sourceName, System.AsyncCallback callback, object asyncState);
        
        string EndGetName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetOneDay", ReplyAction="http://tempuri.org/ITestService/GetOneDayResponse")]
        TestWeatherClient.TestService.TestData GetOneDay(string sourceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetOneDay", ReplyAction="http://tempuri.org/ITestService/GetOneDayResponse")]
        System.IAsyncResult BeginGetOneDay(string sourceName, System.AsyncCallback callback, object asyncState);
        
        TestWeatherClient.TestService.TestData EndGetOneDay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetThreeDays", ReplyAction="http://tempuri.org/ITestService/GetThreeDaysResponse")]
        System.Collections.Generic.List<TestWeatherClient.TestService.TestData> GetThreeDays(string sourceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetThreeDays", ReplyAction="http://tempuri.org/ITestService/GetThreeDaysResponse")]
        System.IAsyncResult BeginGetThreeDays(string sourceName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<TestWeatherClient.TestService.TestData> EndGetThreeDays(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SetName", ReplyAction="http://tempuri.org/ITestService/SetNameResponse")]
        void SetName(string sourceName, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/SetName", ReplyAction="http://tempuri.org/ITestService/SetNameResponse")]
        System.IAsyncResult BeginSetName(string sourceName, string name, System.AsyncCallback callback, object asyncState);
        
        void EndSetName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SetOneDay", ReplyAction="http://tempuri.org/ITestService/SetOneDayResponse")]
        void SetOneDay(string sourceName, TestWeatherClient.TestService.TestData oneDay);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/SetOneDay", ReplyAction="http://tempuri.org/ITestService/SetOneDayResponse")]
        System.IAsyncResult BeginSetOneDay(string sourceName, TestWeatherClient.TestService.TestData oneDay, System.AsyncCallback callback, object asyncState);
        
        void EndSetOneDay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SetThreeDays", ReplyAction="http://tempuri.org/ITestService/SetThreeDaysResponse")]
        void SetThreeDays(string sourceName, System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/SetThreeDays", ReplyAction="http://tempuri.org/ITestService/SetThreeDaysResponse")]
        System.IAsyncResult BeginSetThreeDays(string sourceName, System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays, System.AsyncCallback callback, object asyncState);
        
        void EndSetThreeDays(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/Trigger", ReplyAction="http://tempuri.org/ITestService/TriggerResponse")]
        void Trigger(string sourceName, string printWhat);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/Trigger", ReplyAction="http://tempuri.org/ITestService/TriggerResponse")]
        System.IAsyncResult BeginTrigger(string sourceName, string printWhat, System.AsyncCallback callback, object asyncState);
        
        void EndTrigger(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : TestWeatherClient.TestService.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOneDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOneDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TestWeatherClient.TestService.TestData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TestWeatherClient.TestService.TestData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetThreeDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetThreeDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<TestWeatherClient.TestService.TestData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<TestWeatherClient.TestService.TestData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<TestWeatherClient.TestService.ITestService>, TestWeatherClient.TestService.ITestService {
        
        private BeginOperationDelegate onBeginGetNameDelegate;
        
        private EndOperationDelegate onEndGetNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOneDayDelegate;
        
        private EndOperationDelegate onEndGetOneDayDelegate;
        
        private System.Threading.SendOrPostCallback onGetOneDayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetThreeDaysDelegate;
        
        private EndOperationDelegate onEndGetThreeDaysDelegate;
        
        private System.Threading.SendOrPostCallback onGetThreeDaysCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetNameDelegate;
        
        private EndOperationDelegate onEndSetNameDelegate;
        
        private System.Threading.SendOrPostCallback onSetNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetOneDayDelegate;
        
        private EndOperationDelegate onEndSetOneDayDelegate;
        
        private System.Threading.SendOrPostCallback onSetOneDayCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetThreeDaysDelegate;
        
        private EndOperationDelegate onEndSetThreeDaysDelegate;
        
        private System.Threading.SendOrPostCallback onSetThreeDaysCompletedDelegate;
        
        private BeginOperationDelegate onBeginTriggerDelegate;
        
        private EndOperationDelegate onEndTriggerDelegate;
        
        private System.Threading.SendOrPostCallback onTriggerCompletedDelegate;
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetNameCompletedEventArgs> GetNameCompleted;
        
        public event System.EventHandler<GetOneDayCompletedEventArgs> GetOneDayCompleted;
        
        public event System.EventHandler<GetThreeDaysCompletedEventArgs> GetThreeDaysCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetOneDayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetThreeDaysCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TriggerCompleted;
        
        public string GetName(string sourceName) {
            return base.Channel.GetName(sourceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetName(string sourceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetName(sourceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetName(System.IAsyncResult result) {
            return base.Channel.EndGetName(result);
        }
        
        private System.IAsyncResult OnBeginGetName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            return this.BeginGetName(sourceName, callback, asyncState);
        }
        
        private object[] OnEndGetName(System.IAsyncResult result) {
            string retVal = this.EndGetName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNameCompleted(object state) {
            if ((this.GetNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNameCompleted(this, new GetNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNameAsync(string sourceName) {
            this.GetNameAsync(sourceName, null);
        }
        
        public void GetNameAsync(string sourceName, object userState) {
            if ((this.onBeginGetNameDelegate == null)) {
                this.onBeginGetNameDelegate = new BeginOperationDelegate(this.OnBeginGetName);
            }
            if ((this.onEndGetNameDelegate == null)) {
                this.onEndGetNameDelegate = new EndOperationDelegate(this.OnEndGetName);
            }
            if ((this.onGetNameCompletedDelegate == null)) {
                this.onGetNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetNameDelegate, new object[] {
                        sourceName}, this.onEndGetNameDelegate, this.onGetNameCompletedDelegate, userState);
        }
        
        public TestWeatherClient.TestService.TestData GetOneDay(string sourceName) {
            return base.Channel.GetOneDay(sourceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOneDay(string sourceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOneDay(sourceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public TestWeatherClient.TestService.TestData EndGetOneDay(System.IAsyncResult result) {
            return base.Channel.EndGetOneDay(result);
        }
        
        private System.IAsyncResult OnBeginGetOneDay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            return this.BeginGetOneDay(sourceName, callback, asyncState);
        }
        
        private object[] OnEndGetOneDay(System.IAsyncResult result) {
            TestWeatherClient.TestService.TestData retVal = this.EndGetOneDay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOneDayCompleted(object state) {
            if ((this.GetOneDayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOneDayCompleted(this, new GetOneDayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOneDayAsync(string sourceName) {
            this.GetOneDayAsync(sourceName, null);
        }
        
        public void GetOneDayAsync(string sourceName, object userState) {
            if ((this.onBeginGetOneDayDelegate == null)) {
                this.onBeginGetOneDayDelegate = new BeginOperationDelegate(this.OnBeginGetOneDay);
            }
            if ((this.onEndGetOneDayDelegate == null)) {
                this.onEndGetOneDayDelegate = new EndOperationDelegate(this.OnEndGetOneDay);
            }
            if ((this.onGetOneDayCompletedDelegate == null)) {
                this.onGetOneDayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOneDayCompleted);
            }
            base.InvokeAsync(this.onBeginGetOneDayDelegate, new object[] {
                        sourceName}, this.onEndGetOneDayDelegate, this.onGetOneDayCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<TestWeatherClient.TestService.TestData> GetThreeDays(string sourceName) {
            return base.Channel.GetThreeDays(sourceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetThreeDays(string sourceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetThreeDays(sourceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<TestWeatherClient.TestService.TestData> EndGetThreeDays(System.IAsyncResult result) {
            return base.Channel.EndGetThreeDays(result);
        }
        
        private System.IAsyncResult OnBeginGetThreeDays(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            return this.BeginGetThreeDays(sourceName, callback, asyncState);
        }
        
        private object[] OnEndGetThreeDays(System.IAsyncResult result) {
            System.Collections.Generic.List<TestWeatherClient.TestService.TestData> retVal = this.EndGetThreeDays(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetThreeDaysCompleted(object state) {
            if ((this.GetThreeDaysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetThreeDaysCompleted(this, new GetThreeDaysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetThreeDaysAsync(string sourceName) {
            this.GetThreeDaysAsync(sourceName, null);
        }
        
        public void GetThreeDaysAsync(string sourceName, object userState) {
            if ((this.onBeginGetThreeDaysDelegate == null)) {
                this.onBeginGetThreeDaysDelegate = new BeginOperationDelegate(this.OnBeginGetThreeDays);
            }
            if ((this.onEndGetThreeDaysDelegate == null)) {
                this.onEndGetThreeDaysDelegate = new EndOperationDelegate(this.OnEndGetThreeDays);
            }
            if ((this.onGetThreeDaysCompletedDelegate == null)) {
                this.onGetThreeDaysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetThreeDaysCompleted);
            }
            base.InvokeAsync(this.onBeginGetThreeDaysDelegate, new object[] {
                        sourceName}, this.onEndGetThreeDaysDelegate, this.onGetThreeDaysCompletedDelegate, userState);
        }
        
        public void SetName(string sourceName, string name) {
            base.Channel.SetName(sourceName, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetName(string sourceName, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetName(sourceName, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetName(System.IAsyncResult result) {
            base.Channel.EndSetName(result);
        }
        
        private System.IAsyncResult OnBeginSetName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginSetName(sourceName, name, callback, asyncState);
        }
        
        private object[] OnEndSetName(System.IAsyncResult result) {
            this.EndSetName(result);
            return null;
        }
        
        private void OnSetNameCompleted(object state) {
            if ((this.SetNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetNameAsync(string sourceName, string name) {
            this.SetNameAsync(sourceName, name, null);
        }
        
        public void SetNameAsync(string sourceName, string name, object userState) {
            if ((this.onBeginSetNameDelegate == null)) {
                this.onBeginSetNameDelegate = new BeginOperationDelegate(this.OnBeginSetName);
            }
            if ((this.onEndSetNameDelegate == null)) {
                this.onEndSetNameDelegate = new EndOperationDelegate(this.OnEndSetName);
            }
            if ((this.onSetNameCompletedDelegate == null)) {
                this.onSetNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetNameCompleted);
            }
            base.InvokeAsync(this.onBeginSetNameDelegate, new object[] {
                        sourceName,
                        name}, this.onEndSetNameDelegate, this.onSetNameCompletedDelegate, userState);
        }
        
        public void SetOneDay(string sourceName, TestWeatherClient.TestService.TestData oneDay) {
            base.Channel.SetOneDay(sourceName, oneDay);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetOneDay(string sourceName, TestWeatherClient.TestService.TestData oneDay, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetOneDay(sourceName, oneDay, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetOneDay(System.IAsyncResult result) {
            base.Channel.EndSetOneDay(result);
        }
        
        private System.IAsyncResult OnBeginSetOneDay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            TestWeatherClient.TestService.TestData oneDay = ((TestWeatherClient.TestService.TestData)(inValues[1]));
            return this.BeginSetOneDay(sourceName, oneDay, callback, asyncState);
        }
        
        private object[] OnEndSetOneDay(System.IAsyncResult result) {
            this.EndSetOneDay(result);
            return null;
        }
        
        private void OnSetOneDayCompleted(object state) {
            if ((this.SetOneDayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetOneDayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetOneDayAsync(string sourceName, TestWeatherClient.TestService.TestData oneDay) {
            this.SetOneDayAsync(sourceName, oneDay, null);
        }
        
        public void SetOneDayAsync(string sourceName, TestWeatherClient.TestService.TestData oneDay, object userState) {
            if ((this.onBeginSetOneDayDelegate == null)) {
                this.onBeginSetOneDayDelegate = new BeginOperationDelegate(this.OnBeginSetOneDay);
            }
            if ((this.onEndSetOneDayDelegate == null)) {
                this.onEndSetOneDayDelegate = new EndOperationDelegate(this.OnEndSetOneDay);
            }
            if ((this.onSetOneDayCompletedDelegate == null)) {
                this.onSetOneDayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetOneDayCompleted);
            }
            base.InvokeAsync(this.onBeginSetOneDayDelegate, new object[] {
                        sourceName,
                        oneDay}, this.onEndSetOneDayDelegate, this.onSetOneDayCompletedDelegate, userState);
        }
        
        public void SetThreeDays(string sourceName, System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays) {
            base.Channel.SetThreeDays(sourceName, threeDays);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetThreeDays(string sourceName, System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetThreeDays(sourceName, threeDays, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetThreeDays(System.IAsyncResult result) {
            base.Channel.EndSetThreeDays(result);
        }
        
        private System.IAsyncResult OnBeginSetThreeDays(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays = ((System.Collections.Generic.List<TestWeatherClient.TestService.TestData>)(inValues[1]));
            return this.BeginSetThreeDays(sourceName, threeDays, callback, asyncState);
        }
        
        private object[] OnEndSetThreeDays(System.IAsyncResult result) {
            this.EndSetThreeDays(result);
            return null;
        }
        
        private void OnSetThreeDaysCompleted(object state) {
            if ((this.SetThreeDaysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetThreeDaysCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetThreeDaysAsync(string sourceName, System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays) {
            this.SetThreeDaysAsync(sourceName, threeDays, null);
        }
        
        public void SetThreeDaysAsync(string sourceName, System.Collections.Generic.List<TestWeatherClient.TestService.TestData> threeDays, object userState) {
            if ((this.onBeginSetThreeDaysDelegate == null)) {
                this.onBeginSetThreeDaysDelegate = new BeginOperationDelegate(this.OnBeginSetThreeDays);
            }
            if ((this.onEndSetThreeDaysDelegate == null)) {
                this.onEndSetThreeDaysDelegate = new EndOperationDelegate(this.OnEndSetThreeDays);
            }
            if ((this.onSetThreeDaysCompletedDelegate == null)) {
                this.onSetThreeDaysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetThreeDaysCompleted);
            }
            base.InvokeAsync(this.onBeginSetThreeDaysDelegate, new object[] {
                        sourceName,
                        threeDays}, this.onEndSetThreeDaysDelegate, this.onSetThreeDaysCompletedDelegate, userState);
        }
        
        public void Trigger(string sourceName, string printWhat) {
            base.Channel.Trigger(sourceName, printWhat);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTrigger(string sourceName, string printWhat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTrigger(sourceName, printWhat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTrigger(System.IAsyncResult result) {
            base.Channel.EndTrigger(result);
        }
        
        private System.IAsyncResult OnBeginTrigger(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sourceName = ((string)(inValues[0]));
            string printWhat = ((string)(inValues[1]));
            return this.BeginTrigger(sourceName, printWhat, callback, asyncState);
        }
        
        private object[] OnEndTrigger(System.IAsyncResult result) {
            this.EndTrigger(result);
            return null;
        }
        
        private void OnTriggerCompleted(object state) {
            if ((this.TriggerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TriggerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TriggerAsync(string sourceName, string printWhat) {
            this.TriggerAsync(sourceName, printWhat, null);
        }
        
        public void TriggerAsync(string sourceName, string printWhat, object userState) {
            if ((this.onBeginTriggerDelegate == null)) {
                this.onBeginTriggerDelegate = new BeginOperationDelegate(this.OnBeginTrigger);
            }
            if ((this.onEndTriggerDelegate == null)) {
                this.onEndTriggerDelegate = new EndOperationDelegate(this.OnEndTrigger);
            }
            if ((this.onTriggerCompletedDelegate == null)) {
                this.onTriggerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTriggerCompleted);
            }
            base.InvokeAsync(this.onBeginTriggerDelegate, new object[] {
                        sourceName,
                        printWhat}, this.onEndTriggerDelegate, this.onTriggerCompletedDelegate, userState);
        }
    }
}
